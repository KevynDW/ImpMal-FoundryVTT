export default function() 
{
    Hooks.on("init", () => 
    {
        mergeObject(game.impmal.config.effectScripts, {
            "AXOnZ7UZlPmawf88": "args.advCount++;",
            "sbIChwi1lZxCjoiV": "return !args.data.other.resist != \"frightened\";",
            "0v4TA7G2gd2ureEO": "return args.data.other.resist != \"frightened\";",
            "tL9YNmXaKogz1FAE": "return args.data.skill != \"fortitude\"",
            "phKn7W382yzG6G72": "args.disCount++;",
            "DJ3asBVse5uURrlO": "return args.data.skill != \"awareness\"",
            "qZ1VkWzaV8Y6UwmA": "return args.data.skill == \"awareness\" && args.skillItem.name == \"Sight\"",
            "vRFfNDbQa4b7ve1O": "        let test = await this.actor.setupSkillTest({key : \"fortitude\"}, {title : {append : ` – ${this.effect.name}`}});\n        if (test.succeeded && test.result.SL > 0)\n        {\n            modifiers.push({value : -test.result.SL, label : this.effect.name});\n        }",
            "ED7EeRrc8Kxq0buR": "if (this.actor.hasCondition(\"blinded\"))\n{\n\tui.notifications.notify(\"Immune to the Blinded Condition\")\n\tthis.actor.hasCondition(\"blinded\")?.delete();\n}",
            "wEo5SFN5Gj4tKH2w": "this.actor.system.warp.threshold = this.actor.system.characteristics.wil.bonus * 2;",
            "vp6RpCwqY1oLUhGv": "args.advCount+=1;",
            "loBxASK7d2l9bwGx": "return !args.data.context.corruption",
            "5hulLIjia6cSLVOs": "return args.data.context.corruption",
            "6yX3fQEJHfGmXLwW": "args.fields.SL++;",
            "ndJFK6FvHGOx8mxK": "return args.data.skill != \"psychic\"",
            "l5OpGmZWxfgl2CFR": "return args.data.skill == \"psychic\"",
            "q4TKLfK9BuAcr4Xs": "        if (args.woundsGained > 0)\n        {\n\t        await this.effect.update({[\"flags.impmal.relentlessPursuitIds.\" + args.actor.id] :  true})\n\t\tui.notifications.notify(`<strong>${this.effect.name}</strong>: Quarry added`)\n        }",
            "edq6E8AZoTtSUhYt": "return !args.isAttack",
            "X0ExIlCPt6bRJkIL": "        return this.effect.flags.impmal?.relentlessPursuitIds?.[args.data.targets[0]?.actor?.id];\n",
            "YYhLHmr2K1QT3SMw": "this.effect.update({\"flags.impmal.-=relentlessPursuitIds\" : null});\nui.notifications.notify(\"Quarry Cleared\");",
            "92H3GLZ0Cu6t9msv": "args.disCount--;",
            "s0Lx7dIagwSq5ozt": "return this.actor.statuses.has(\"blinded\");",
            "cK4KQ45NnVbkwjed": "let target = args.data.targets[0]?.actor\nif (target)\n{\n\treturn target.statuses.has(\"poorlyLit\") || target.statuses.has(\"dark\");\n}\n",
            "Qk7HWw0HtM7POhI8": "delete args.data.onlyAutomaticSuccess",
            "tEBDDfKCd9thZnsi": "return !args.data.context?.resist?.includes(\"blinded\")",
            "vSXPZHPoMiAOjKkg": "return args.data.context?.resist?.includes(\"blinded\")",
            "ney0hpCoXO75VkcP": "if (args.woundsGained > 0) \n{\n    let frightened = this.actor.hasCondition(\"frightened\");\n    if (frightened)\n    {\n        this.script.scriptMessage(\"No longer Frightened\")\n        frightened.delete();\n    }\n}",
            "9KZE5gliwJ1ADoOG": "return args.data.skill != \"discipline\" || args.skillItem?.name != \"Fear\"",
            "yvlghgMWATkd73xX": "return args.data.skill != \"intuition\";",
            "SvIl8WaBnEbFRu1t": "return args.data.skill == \"intuition\" && args.skillItem?.name == \"People\"",
            "SJmevMR905YWczhZ": "let roll = Math.ceil(CONFIG.Dice.randomUniform() * 10);\nlet newSpeed = \"\"\nif (roll <= 4)\n{\n\tnewSpeed = \"slow\"\n}\nelse if (roll <= 7)\n{\n\tnewSpeed = \"normal\";\n}\nelse if (roll <= 10)\n{\n\tnewSpeed = \"fast\"\n}\n\nthis.actor.update({\"system.combat.speed.land.value\" : newSpeed});\n\nthis.script.scriptMessage(`<a class=\"inline-roll\"><i class=\"fa-solid fa-dice-d10\"></i>${roll}</a>: ${game.impmal.config.speeds[newSpeed]}`)",
            "oRIVt6AkhhvVnIfv": "\n        let roll = Math.ceil(CONFIG.Dice.randomUniform() * 10);\n        let item;\n        if (roll <= 2)\n        {\n            item = this.actor.items.get(\"2SZrKJ0gmD4XNAfF\")\n        }\n        else if (roll <= 4)\n        {\n            item = this.actor.items.get(\"QRwhlJY9CXkKCiUT\")\n        }\n        else if (roll <= 6)\n        {\n            item = this.actor.items.get(\"B1OrTmkBMJze5TZU\")\n        }\n        else if (roll <= 8)\n        {\n            item = this.actor.items.get(\"EQjhALZOZZOeXlM3\")\n        }\n        else if (roll <= 10)\n        {\n            item = this.actor.items.get(\"Lhwa7OvB2p8z7zLs\")\n            await this.actor.setupTraitTest(item.id);\n            ui.notifications.notify(\"Resolve this attack with the target before rolling the next attack\")\n        }\n\n        this.actor.setupTraitTest(item.id);\n\n        this.script.scriptMessage(`<a class=\"inline-roll\"><i class=\"fa-solid fa-dice-d10\"></i>${roll}</a>: ${item.name}`)",
            "LVK6ye0vxdMVa9nq": "        if ((this.actor.statuses.has(\"lightCover\") || this.actor.statuses.has(\"mediumCover\") || this.actor.statuses.has(\"heavyCover\")) && args.opposed && args.opposed.attackerTest.item?.system.isRanged)\n        {\n            args.modifiers.push({value : -1, label : this.script.label, armour : true});\n        }",
            "5kVCXILf9b3xZPBF": "args.traits.list = args.traits.list.filter(i => ![\"penetrating\", \"rend\"].includes(i.key));\n        // TODO: Add some sort of way to write that this happened in chat",
            "xbUGpBOZKFfvyYlx": "if (args.isAttack) args.fields.SL++; else args.advCount++;",
            "dy0h3DnV4cbDTmK7": "return args.data.targets[0]?.actor?.itemTypes?.power?.length > 0",
            "ZTeV76SFxhjZk39S": "if (args.context.resist.includes(\"power\")) \n{\n    args.result.SL = (args.context.resistingTest?.result?.SL + 1) || args.result.SL;\n    args.result.text.blank = \"Automatically win opposed tests against Psychic Powers\";\n    args.result.outcomeDescription = \"Success\"\n}",
            "hGoQW7faAGBzZltI": "        if (this.actor.system.corruption.value > 0)\n        {\n            this.actor.update({\"system.corruption.value\" : 0});\n            ui.notifications.notify(`<strong>${this.effect.name}</strong>: Cannot gain Corruption Points`);\n        }",
            "zqHu7x7LySFiZnE5": "return args.data.characteristic != \"fel\"",
            "DS1LjkfgwNMd4jof": "return args.data.characteristic == \"fel\"",
            "6DyxrjhrdlJ32KTN": "this.actor.applyDamage(5).then(data => ui.notifications.notify(\"Took \" + data.woundsGained + \" Damage from Hazard (Blank)\"));",
            "QcOPkOjl7SyMtSp3": "return !args.power",
            "QaW538nDW3sFbBQG": "return args.power",
            "fewvcgoQwIht9E0x": "        if (this.actor.hasCondition(\"stunned\"))\n            return;\n        this.actor.setupSkillTest({key : \"fortitude\", name : \"Endurance\"}, {title : {append : \" - \" + this.effect.name}, fields : {difficulty : \"hard\"}}).then(test => \n            {\n                if (!test.succeeded)\n                {\n                    this.actor.addCondition(\"stunned\");\n                }\n            });",
            "fcEjhNnSq37ST6no": "return args.data.skill == \"intuition\";",
            "T1PEjMYcNVeajv7Z": "return args.data.skill != \"discipline\";",
            "J2T7UpNNScHGFVmW": "return args.data.skill == \"discipline\" && args.skillItem?.name == \"Composure\"",
            "Vj0ww1WNQI8nU6Mr": "let weapons = await Promise.all([\"id1\", \"id2\", \"id3\"].map(fromUuid))\n\nlet choice = await DocumentChoice.create(weapons, 1);\n\nthis.actor.createEmbeddedDocuments(\"Item\", choice);",
            "CEtOg2IbqiIGU5Rd": "args.system.encumbrance.value -= Math.min(this.effect.sourceTest.result.SL, args.system.encumbrance.value)",
            "ao8ELVKnCwOn4azZ": "return args.data.characteristic != \"per\"",
            "6x1XHWgDdhG22m7A": "return args.data.characteristic == \"per\"",
            "RtRyBYt8657Pz4vA": "        let healed = this.actor.system.characteristics.tgh.bonus + this.effect.sourceTest.result.SL + this.effect.sourceTest.actor.system.characteristics.wil.bonus;\n        this.script.scriptMessage(\"<strong>\" + this.actor.name + \"</strong> healed \" + healed + \" wounds\");\n        await this.actor.update({\"system.combat.wounds.value\" : this.actor.system.combat.wounds.value - healed});\n        await this.actor.hasCondition(\"bleeding\")?.delete()\n        \n        let existing = this.actor.effects.find(e => e.getFlag(\"impmal\", \"sealWounds\"))\n\n        if (existing)\n        {\n            await this.actor.addCondition(\"fatigued\")\n            this.script.options.immediate.deleteEffect = true;\n        }\n        else \n        {\n            this.effect.updateSource({\"flags.impmal.sealWounds\" : true})\n        }",
            "MVG9gRERI95Fvi3R": "return args.data.skill != \"reflexes\"",
            "Zoa5fEkcJgDbzfGB": "return args.data.skill == \"reflexes\"",
            "69Tp4TEbOF8A7uR1": "return !args.data.context.resist?.includes(\"power\")",
            "KMh6L0QE8H6f9VTC": "return args.data.context.resist?.includes(\"power\")",
            "kLb2LJiJiz76qHnr": "await this.actor.addCondition(\"restrained\");",
            "6Rbg5rfgIzfD0DDN": "        this.actor.setupSkillTest({key : \"athletics\", name : \"Might\"}, {title : {append : ` – ${this.effect.label}`}}).then(test => \n        {\n            if (test.result.SL > this.effect.sourceTest.result.SL)\n            {\n                this.actor.removeCondition(\"restrained\");\n                this.effect.delete();\n            }\n        });",
            "oolc7TM47VMaInUB": "        if (args.opposed?.attackerTest?.item?.system.isRanged && !args.opposed?.attackerTest?.actor?.statuses.has(\"psychic-barrier\"))\n        {\n            args.modifiers.push({value : this.effect.sourceTest.result.SL * -2, label : this.effect.name});\n        }",
            "kYdwPN889itVQ5vN": "        if (args.opposed?.attackerTest?.item?.system.isRanged && !args.actor.statuses.has(\"psychic-barrier\"))\n        {\n            args.modifiers.push({value : this.effect.sourceTest.result.SL * -2, label : this.effect.name});\n        }",
            "ZPDwYVyLE5Wnz7BU": "return ![\"reflexes\", \"athletics\"].includes(args.data.skill);",
            "EE64FC2FbZAgouX0": "return args.skillItem?.name == \"Running\" || args.skillItem?.name == \"Dodge\";",
            "jbtcxplaQTTcFmxQ": "if (this.actor.hasCondition(\"prone\")) return;\n        \nthis.actor.setupSkillTest({key : \"athletics\", name : \"Might\"}, {fields: {difficulty: \"routine\"}, title : {append : ` – ${this.effect.label}`}}).then(test => \n        {\n            if (test.result.SL < this.effect.sourceTest.result.SL)\n            {\n                this.actor.addCondition(\"prone\");\n            }\n        });",
            "Z9VIOduyBKq70cFI": "if (this.actor.hasCondition(\"prone\")) return;\n                \nthis.actor.setupSkillTest({key : \"athletics\", name : \"Might\"}, {fields: {difficulty: \"routine\"}, title : {append : ` – ${this.effect.label}`}}).then(test => \n        {\n            if (test.result.SL < this.effect.sourceTest.result.SL)\n            {\n                this.actor.addCondition(\"prone\");\n            }\n        });",
            "15dNwleVtIt77ywq": "return args.isAttack",
            "UMs2HogdOD6qJH2s": "\n        if (this.actor.uuid == ChatMessage.getSpeakerActor(this.effect.sourceTest.context.speaker).uuid)\n            return\n\n        this.actor.setupSkillTest({key: \"discipline\", name : \"Fear\"}, {title : {append : \" - \" + this.effect.name}}).then(test => {\n            if (test.result.SL > this.effect.sourceTest.result.SL)\n            {\n                this.effect.delete();\n            }\n            else \n            {\n                this.actor.addCondition(\"frightened\");\n            }\n        });",
            "SQinXbE10WBa8WPn": "await this.actor.addCondition('prone'); await this.actor.addCondition('incapacitated')",
            "H6f0NfYdXNc0Evyb": "return args.skillItem?.name != \"Psyniscience\"",
            "MsMVZHlEwwY6KXso": "\n    let weapons = [{\n        \"name\": \"Heavy Bolter\",\n        \"type\": \"trait\",\n        \"id\": \"CNsINQvyrV8iWNni\",\n        \"img\": \"modules/impmal-core/assets/icons/weapons/boltgun.webp\",\n        \"system\": {\n            \"notes\": {\n                \"player\": \"\",\n                \"gm\": \"\"\n            },\n            \"attack\": {\n                \"enabled\": true,\n                \"type\": \"ranged\",\n                \"characteristic\": \"\",\n                \"skill\": {\n                    \"key\": \"ranged\",\n                    \"specialisation\": \"Ordnance\"\n                },\n                \"damage\": {\n                    \"SL\": true,\n                    \"base\": \"10\",\n                    \"characteristic\": \"\",\n                    \"ignoreAP\": false\n                },\n                \"range\": \"long\",\n                \"traits\": {\n                    \"list\": [\n                        {\n                            \"key\": \"heavy\",\n                            \"value\": \"4\"\n                        },\n                        {\n                            \"key\": \"loud\"\n                        },\n                        {\n                            \"key\": \"penetrating\",\n                            \"value\": \"5\"\n                        },\n                        {\n                            \"key\": \"rapidFire\",\n                            \"value\": \"3\"\n                        },\n                        {\n                            \"key\": \"spread\"\n                        },\n                        {\n                            \"key\": \"twohanded\"\n                        }\n                    ]\n                }\n            },\n            \"test\": {\n                \"enabled\": false,\n                \"difficulty\": \"challenging\",\n                \"characteristic\": \"\",\n                \"skill\": {\n                    \"key\": \"\",\n                    \"specialisation\": \"\"\n                }\n            },\n            \"roll\": {\n                \"enabled\": false,\n                \"formula\": \"\",\n                \"label\": \"\"\n            }\n        },\n    }, \n    {\n        \"name\": \"Lascannon\",\n        \"id\": \"ccGr4w9dRxGr1A5Z\",\n        \"type\": \"trait\",\n        \"img\": \"modules/impmal-core/assets/icons/weapons/lascannon.webp\",\n        \"system\": {\n            \"notes\": {\n                \"player\": \"\",\n                \"gm\": \"\"\n            },\n            \"attack\": {\n                \"enabled\": true,\n                \"type\": \"ranged\",\n                \"characteristic\": \"\",\n                \"skill\": {\n                    \"key\": \"ranged\",\n                    \"specialisation\": \"Ordnance\"\n                },\n                \"damage\": {\n                    \"SL\": true,\n                    \"base\": \"18\",\n                    \"characteristic\": \"\",\n                    \"ignoreAP\": false\n                },\n                \"range\": \"extreme\",\n                \"traits\": {\n                    \"list\": [\n                        {\n                            \"key\": \"heavy\",\n                            \"value\": \"4\"\n                        },\n                        {\n                            \"key\": \"loud\"\n                        },\n                        {\n                            \"key\": \"penetrating\",\n                            \"value\": \"10\"\n                        },\n                        {\n                            \"key\": \"twohanded\"\n                        }\n                    ]\n                }\n            },\n            \"test\": {\n                \"enabled\": false,\n                \"difficulty\": \"challenging\",\n                \"characteristic\": \"\",\n                \"skill\": {\n                    \"key\": \"\",\n                    \"specialisation\": \"\"\n                }\n            },\n            \"roll\": {\n                \"enabled\": false,\n                \"formula\": \"\",\n                \"label\": \"\"\n            }\n        },\n    }, \n    {\n        \"name\": \"Missile Launcher (Frag Missile)\",\n        \"id\": \"Qpvdm09qz6PapboN\",\n        \"type\": \"trait\",\n        \"img\": \"modules/impmal-core/assets/icons/weapons/portable-missile-launcher.webp\",\n        \"system\": {\n            \"notes\": {\n                \"player\": \"\",\n                \"gm\": \"\"\n            },\n            \"attack\": {\n                \"enabled\": true,\n                \"type\": \"ranged\",\n                \"characteristic\": \"\",\n                \"skill\": {\n                    \"key\": \"ranged\",\n                    \"specialisation\": \"Ordnance\"\n                },\n                \"damage\": {\n                    \"SL\": true,\n                    \"base\": \"8\",\n                    \"characteristic\": \"\",\n                    \"ignoreAP\": false\n                },\n                \"range\": \"extreme\",\n                \"traits\": {\n                    \"list\": [\n                        {\n                            \"key\": \"blast\"\n                        },\n                        {\n                            \"key\": \"heavy\",\n                            \"value\": \"4\"\n                        },\n                        {\n                            \"key\": \"loud\"\n                        },\n                        {\n                            \"key\": \"spread\"\n                        },\n                        {\n                            \"key\": \"twohanded\"\n                        }\n                    ]\n                }\n            },\n            \"test\": {\n                \"enabled\": false,\n                \"difficulty\": \"challenging\",\n                \"characteristic\": \"\",\n                \"skill\": {\n                    \"key\": \"\",\n                    \"specialisation\": \"\"\n                }\n            },\n            \"roll\": {\n                \"enabled\": false,\n                \"formula\": \"\",\n                \"label\": \"\"\n            }\n        },\n    },\n    {\n        \"id\": \"R6uf5zdRPdgWJNWm\",\n        \"name\": \"Missile Launcher (Krak Missile)\",\n        \"type\": \"trait\",\n        \"img\": \"modules/impmal-core/assets/icons/weapons/portable-missile-launcher.webp\",\n        \"system\": {\n            \"notes\": {\n                \"player\": \"\",\n                \"gm\": \"\"\n            },\n            \"attack\": {\n                \"enabled\": true,\n                \"type\": \"ranged\",\n                \"characteristic\": \"\",\n                \"skill\": {\n                    \"key\": \"ranged\",\n                    \"specialisation\": \"Ordnance\"\n                },\n                \"damage\": {\n                    \"SL\": true,\n                    \"base\": \"16\",\n                    \"characteristic\": \"\",\n                    \"ignoreAP\": false\n                },\n                \"range\": \"extreme\",\n                \"traits\": {\n                    \"list\": [\n                        {\n                            \"key\": \"heavy\",\n                            \"value\": \"4\"\n                        },\n                        {\n                            \"key\": \"loud\"\n                        },\n                        {\n                            \"key\": \"penetrating\",\n                            \"value\": \"6\"\n                        },\n                        {\n                            \"key\": \"spread\"\n                        },\n                        {\n                            \"key\": \"twohanded\"\n                        }\n                    ]\n                }\n            },\n            \"test\": {\n                \"enabled\": false,\n                \"difficulty\": \"challenging\",\n                \"characteristic\": \"\",\n                \"skill\": {\n                    \"key\": \"\",\n                    \"specialisation\": \"\"\n                }\n            },\n            \"roll\": {\n                \"enabled\": false,\n                \"formula\": \"\",\n                \"label\": \"\"\n            }\n        }\n    }\n]\n\n    let choice = (await DocumentChoice.create(weapons, 1, {text : \"Choose the weapon used by the Heavy Weapons Team\"}))\n\n    if (choice && choice.length)\n    {\n        await this.actor.createEmbeddedDocuments(\"Item\", choice);\n    }",
            "dXn0fA1NOqdrH4Bc": "return args.data.skill != \"discipline\"",
            "dc8x3nb7mpNiKqKd": "args.fields.SL += 2;",
            "zliaYZO9lm0DYdf9": "return !args.data.other.resist.includes(\"frightened\");",
            "YKF4SmcW4R1uKGBs": "return args.data.other.resist.includes(\"frightened\");",
            "YJgvlOYOYT9YyAXJ": "return args.data.skill != \"medicae\";",
            "5dyOHdIWHLYdXBoI": "return args.data.skill == \"medicae\";",
            "yoXQA72HNSNRlc5R": "//TODO",
            "SWW3fsT6VZEnbrGl": "return !args.isAttack || !args.weapon?.system.isRanged",
            "ZgKuXW5U8jvELFaT": "return ![\"discipline\", \"presence\", \"navigation\", \"stealth\"].includes(args.data.skill);",
            "RUyELC7eSSXomvB8": "\n                            let roll = new Roll(\"1d5\").roll().then(async roll => {\n                                this.actor.applyDamage(roll.total, {ignoreAP : true}).then(data => this.script.scriptMessage(\"Took \" + data.woundsGained + \" Damage from Ablaze\"));\n                            })\n                            ",
            "ZvHWXNS3NmRwZNAo": "        if (args.context.skill == \"discipline\" && args.result.outcome == \"failure\" && !hasProperty(args.context, \"sanityIsForTheWeak\"))\n        {\n            let use = await Dialog.wait({\n                label : this.effect.name,\n                content : \"Sufffer 1d10 Damage to automatically pass?\",\n                buttons : {\n                    yes : {\n                        label : game.i18n.localize(\"Yes\"),\n                        callback : () => \n                        {\n                            let damage = Math.ceil(10 * CONFIG.Dice.randomUniform());\n                            this.actor.applyDamage(damage, {ignoreAP : true});\n                            return damage;\n                        }\n                    },\n                    no : {\n                        label : game.i18n.localize(\"No\"),\n                        callback : () => \n                        {\n                            return false;\n                        }\n                    }\n                }\n            });\n\n            args.context.sanityIsForTheWeak = use;\n        }\n\n            if (args.context.sanityIsForTheWeak)\n            {\n                args.result.outcome = \"success\";\n\t\targs.result.outcomeDescription = \"Success\";\n                args.result.SL = 1;\n                args.result.text.sanityIsForTheWeak = `<strong>${this.effect.name}</strong>: Automatically Pass. Takes ${args.context.sanityIsForTheWeak} Damage`;\n            }",
            "NMS9w5uSijOotJeQ": "return args.data.skill == \"discipline\"",
            "gcgZ3MFLfMbOsKai": "if (args.woundsGained > 0)\n\tthis.effect.update({disabled : true});",
            "6mYs0o0x6if5LRaw": "return ![\"tech\", \"piloting\"].includes(args.data.skill);",
            "OwHe6K3jsNjQpwrT": "return args.data.skill != \"tech\"",
            "CZlu5B5tCkbnoalq": "return args.data.skill == \"tech\"",
            "yhhzFRtF3TNjZAIt": "    let weapons = await Promise.all([\"2XMWybp4AQqoEPtI\", \"blRx8XLXQaD9sjDz\", \"BoWOcsxxSvrGIefL\", \"ix1RLHT1T5rd0Egu\", \"hlcxzIxPsc6fXOhJ\", \"HQ4thlBy0uFtXo13\"].map(game.impmal.utility.findId));\n\n    let choice = (await DocumentChoice.create(weapons, 1, {text : \"Choose a weapon for the specialist to use\"})).map(i => i.toObject())\n\n    if (choice && choice.length)\n    {\n        let lasgun = await this.actor.items.getName(\"Lasgun\")?.delete();\n\tchoice[0].sort = lasgun?.sort\n        await this.actor.createEmbeddedDocuments(\"Item\", choice);\n    }",
            "1r6mzjVXFYRnvSVY": "console.log(this.effect.sourceTest)\n\nlet damage = 4 + this.effect.sourceActor.system.characteristics.wil.bonus + this.effect.sourceTest.result.SL\n\nthis.actor.applyDamage(damage, {location : \"body\"})\n\nlet test = await this.actor.setupSkillTest({key : \"athletics\", name : \"Might\"}, {fields : {difficulty : \"routine\"}, title : {append : \" - \" + this.effect.name}});\n\nif (test.failed)\n{\n\tthis.actor.addCondition(\"prone\");\n}\n\n",
            "PMRnPXavqgFqILbv": "        let item = this.actor.items.get(this.effect.getFlag(\"impmal\", \"itemTargets\")[0]);\n\n        if (item && item.system.isEquipped)\n        {\n            this.actor.applyDamage(ChatMessage.getSpeakerActor(this.effect.sourceTest.context.speaker).system.characteristics.wil.bonus, {location: \"body\", ignoreAP : item.type == \"protection\"})\n        }\nelse \n{\n\tthis.script.scriptMessage(\"No Damage - Item is unequipped\");\n}",
            "S8NYH03uDoxbHsaN": "await this.actor.applyDamage(6 + this.effect.sourceTest?.result?.SL);\n\nlet test = await this.actor.setupSkillTest({key : \"reflexes\", name : \"Dodge\"}, {fields : {difficulty : \"hard\"}, title : {append : ` – ${this.effect.label}`}})\n\nif (test.result.SL > this.effect.sourceTest?.result?.SL)\n{\n    this.actor.addCondition(\"ablaze\");\n}",
            "w6NPAgwewIA93B3v": "this.actor.applyDamage(5).then(data => ui.notifications.notify(\"Took \" + data.woundsGained + \" Damage from Hazard\"));\n\nlet test = await this.actor.setupSkillTest({key : \"reflexes\", name : \"Dodge\"}, {fields : {difficulty : \"hard\"}, title : {append : ` – ${this.effect.label}`}})\n\nif (!test.succeeded)\n{\n    this.actor.addCondition(\"ablaze\");\n}",
            "QXbwUwNLc5e5on8g": "        this.actor.applyDamage(5).then(data => ui.notifications.notify(\"Took \" + data.woundsGained + \" Damage from Hazard\"));\n\n        this.actor.setupSkillTest({key : \"reflexes\", name : \"Dodge\"}, {fields : {difficulty : \"hard\"}, title : {append : ` – ${this.effect.label}`}}).then(test => {if (!test.succeeded)\n        {\n            this.actor.addCondition(\"ablaze\");\n        }\n        });",
            "Pyv0vChpwWK0jjMC": "        let locations = Object.keys(args.actor.system.combat.hitLocations).map(k => \n        {\n            return {id : k, name : game.i18n.localize(args.actor.system.combat.hitLocations[k].label)};\n        });\n        \n        let location = (await DocumentChoice.create(locations, 1))[0].id;\n        mergeObject(args.locationData, args.actor.system.combat.hitLocations[location]);",
            "qZlOT56r0XDLCbSX": "        let protection = args.locationData.items.filter(i => i.type == \"protection\");\n        for(let item of protection)\n        {\n            item.update({[\"system.damage.\" + args.locationData.key] : item.system.damage[args.locationData.key] + this.actor.system.characteristics.wil.bonus});\n        }\n        if (protection.length > 0)\n        {\n            this.script.scriptMessage(protection.map(i => i.name).join(\", \") + \" damaged by \" + this.actor.system.characteristics.wil.bonus);\n        }",
            "wHoqFVMPXEJWNx8H": "return (args.data.weapon || args.data.power)",
            "nvng0pO8I3XGxIOj": "args.data.context.doubleWarp = true;",
            "OBf61oejnOsNioTz": "for(let i = 0; i < args.result.SL; i++)\n{\n    let roll = await new Roll(\"1d10\");\n    roll.toMessage();\n}",
            "2WP55kSyhlLOvCLP": "return true;",
            "l3HPKqIKuXELbznP": "this.effect.delete();",
            "HJDQ1LFwq4J7mvzE": "this.actor.applyDamage(2, {ignoreAP : true});",
            "cOwp15a3Kn0u48yV": "let activator = this.effect.sourceTest.item.effects.get(\"8boaDtDEpNK5cyFJ\") // Activation effect;\n\nlet effectData = activator.toObject();\n\nargs.options.keepId = true;\neffectData.flags.impmal.linkedEffect = this.effect.uuid;\neffectData.statuses = [\"lifeLeech\"];\n\nthis.effect.sourceTest.actor.applyEffect({effectData : [effectData]});",
            "vdcj2ZREX8a66Gbv": "        let linkedEffect = fromUuidSync(this.effect.flags.impmal?.linkedEffect);\n\n        if (linkedEffect)\n        {\n            let actor = linkedEffect.actor;\n\n            if (actor)\n            {\n                let damageData = await actor.applyDamage(3 + this.actor.system.characteristics.wil.bonus, {ignoreAP : true, update: false});\n                let healed = Math.ceil(damageData.woundsGained / 2);\n                await this.actor.update({\"system.combat.wounds.value\" : this.actor.system.combat.wounds.value - healed});\n                this.script.scriptMessage(`<p><strong>${actor.name}</strong> takes ${damageData.woundsGained} Damage.</p> <p><strong>${this.actor.name}</strong> heals ${healed} Wounds</p>`);\n                SocketHandlers.executeOnOwner(actor, \"updateActor\", {update : damageData.updateData, speaker : ChatMessage.getSpeaker({actor})});\n            }\n        }\n\telse \n\t{\n\t\tui.notifications.error(\"No linked effect!\")\n\t}",
            "o2swzX2Ct8ZBEEbT": "        let test = await this.actor.setupSkillTest({key : \"fortitude\", name : \"Endurance\"}, {fields : {difficulty : \"routine\"}, title : {append : \" - \" + this.effect.name}})\n\n        if (test.result.SL < this.effect.sourceTest?.result.SL)\n        {\n            let damage = this.effect.sourceTest.result.SL - test.result.SL;\n            let damageData = await this.actor.applyDamage(damage, {ignoreAP : true});\n            let message = `<p>Takes ${damage} Damage</p>`;\n            if (damage > this.actor.system.characteristics.tgh.bonus)\n            {\n                message += `<p>Gains the <em>Poisoned</em> Condition</p>`;\n                await this.actor.addCondition(\"poisoned\");\n            }\n            this.script.scriptMessage(message);\n        }",
            "w6fZNfQxH0ON8GMP": "return args.actor.system.warp.charge > 0;",
            "axOq3XTBusAHQMrq": "if (this.actor.system.warp.charge == 0) this.effect.delete();",
            "wViGwSuq6ZxiHYLY": "        let test = await this.actor.setupSkillTest({key : \"discipline\", name : \"Psychic\"}, {fields : {difficulty : \"difficult\"}, title : {append : \" - \" + this.effect.name}});\n\n        if (this.effect.sourceTest.result.SL > test.result.SL)\n        {\n            let damage = (this.effect.sourceTest.actor.system.characteristics.wil.bonus + (this.effect.sourceTest.result.SL - test.result.SL));\n            if (this.actor.system.species == \"Daemon\" || this.actor.itemTypes.power.length > 0)\n            {\n                damage *= 2;\n            }\n            else if (false) // How to determine if null?\n            {\n                damage = 0;\n            }\n            let damageData = await this.actor.applyDamage(damage, {ignoreAP : true});\n\n            this.script.scriptMessage(`Suffers ${damage} Damage ${damageData.woundsGained != damage ? `(${damageData.woundsGained} Wounds)` : \"\"}`);\n        }",
            "absiTlv4eITdkgDJ": "this.actor.addCondition(\"frightened\", {type : \"major\"});",
            "ZzaZ3C9TO52dmxRE": "        this.actor.setupSkillTest({key : \"discipline\", name : \"Fear\"}, {title : {append : \" – \" + this.effect.name}}).then(test => {\n            if (test.result.SL > this.effect.sourceTest.result.SL)\n            {\n                this.actor.hasCondition(\"frightened\")?.delete();\n                this.effect.delete();\n            }\n        });",
            "956i9t1cYpghLXfV": "return args.data.skill != \"stealth\"",
            "aFaVAxJAXZ2dA1V4": "return args.weapon || args.power || args.isAttack",
            "29JKdbJa7qOupZ1G": "return !args.isAttack || !this.actor.statuses.has(\"aim\") || !args.data.item?.system?.isRanged",
            "KtoQY4ypY18Rbg6Y": "return args.isAttack && this.actor.statuses.has(\"aim\") && args.data.item?.system?.isRanged",
            "mn2OMGGN0I2DLiSe": "this.actor.system.augmetics.max += this.actor.system.characteristics.tgh.bonus",
            "i6Hodo3VSdLPvGRn": "this.actor.applyDamage(3, {ignoreAP : true}).then(data => this.script.scriptMessage(\"Took \" + data.woundsGained + \" Damage\"));",
            "HijPYFIkZFi7tnDO": "return args.data.skill == \"awareness\" && args.skillItem?.name == \"Sight\"",
            "a2KXJQvnq3X1A75S": "if (args.result.critical)\n{\n   args.result.critModifier += this.actor.system.skills.medicae.advances\n   args.result.tags.appliedAnatomy = this.effect.name\n}",
            "hUSOZOlANEM1p28B": "this.actor.applyDamage(1, {ignoreAP : true}).then(data => this.script.scriptMessage(\"Took \" + data.woundsGained + \" Damage\"));",
            "j8cgSnjzkROeo2S3": "return ![\"melee\"].includes(args.data.skill);",
            "8LEKh9u5ZaYc3y5e": "return args.data.skill == \"melee\"",
            "cdPHItdRDQpUx9Nb": "return !args.weapon && !args.trait",
            "MD3xpwWoku8itUhe": "return true",
            "dpfGPEbwtHictVoN": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\n\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.hand\" : hand});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\n\nif (this.actor.type == \"character\")\n{\n    await this.actor.update(this.actor.system.hands.toggle(hand));\n}\n",
            "tag1gvpLJqxC6osm": "this.actor.system.hands[this.item.system.location.value].useless = true;",
            "7LmbaEKe1QpImusG": "        let minor = [];\n        if (this.item.system.taken < 2)\n        {\n            minor = await DocumentChoice.create((await game.impmal.utility.getAllItems([\"power\"])).filter(i => i.system.discipline == \"minor\"), 1);\n        }\n\n        let disciplines = foundry.utils.deepClone(game.impmal.config.disciplines);\n        delete disciplines.minor;\n        for(let power of this.actor.itemTypes[\"power\"])\n        {\n            delete disciplines[power.system.discipline];\n        }\n\n        let discipline = (await DocumentChoice.create(disciplines, 1))[0];\n\n        let major = await DocumentChoice.create((await game.impmal.utility.getAllItems([\"power\"])).filter(i => i.system.discipline == discipline.id), 1);\n\n        return this.actor.createEmbeddedDocuments(\"Item\", minor.concat(major).map(i => {\n            i = i.toObject();\n            i.system.xpOverride = 0;\n            return i;\n        }))",
            "sFE46MePCqM6Z8TC": "return !args.availability",
            "stxZD1VEJII6tSUq": "return args.availability",
            "aObGrFC9jh5QRxgB": "return args.data.skill != \"rapport\"",
            "FzLBYzzMiCpXltmX": "return args.data.skill == \"rapport\" && [\"Haggle\", \"Inquiry\", \"Charm\"].includes(args.skillItem?.name)",
            "IYlF8pxy3VUlSeHz": "this.actor.setupSkillTest({key : \"fortitude\", name : \"Pain\"}, {title : {append : \" - \" + this.effect.name}}).then(test => {\n\tif (test.failed)\n\t{\n\t\tthis.actor.addCondition(\"stunned\");\n\t}\n})",
            "nQ7U4TtvUVah3e4I": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\n\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});",
            "waMaO6MWHMHZ3cJC": "        let skills = args.actor.itemTypes.specialisation.filter(s => [\"People\", \"High Gothic\", \"Theology\", \"Charm\"].includes(s.name) || s.system.skill == \"presence\");\n\n        let chosen = (await DocumentChoice.create(skills, 1))[0]\n\n        if (chosen)\n        {\n            await chosen.update({\"system.advances\" : chosen.system.advances + 1});\n            await args.actor.update({\"system.xp.other.list\" : args.actor.system.xp.other.add({description : `${this.effect.name} (${chosen.name})`, xp: -20})})\n        }",
            "9s8OTVnAaRT2ZqPJ": "        let bleeding = this.actor.hasCondition(\"bleeding\");\n        let difficulty;\n        if (bleeding?.isMajor)\n        {\n            difficulty = \"hard\";\n        }\n        else if (bleeding?.isMinor)\n        {\n            difficulty = \"challenging\";\n        }\n        if (bleeding)\n        {\n            this.actor.setupSkillTest({key : \"fortitude\"}, {fields : {difficulty}}).then(test => \n            {\n                if (test.result.outcome == \"success\")\n                {\n                    bleeding.delete();\n                }\n            });\n        }",
            "7asPmhME9RRb9w1o": "return (args.data.skill == \"awareness\" && args.skillItem?.name == \"Sight\")",
            "Un9U2OrmxAWtD4wT": "let injury = (await game.impmal.utility.findId(\"yDm12mSRSP7eyFmr\")).toObject()\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "UQxQergUCitNBd1r": "        let locations = Object.keys(this.actor.system.combat.hitLocations).map(k => \n        {\n            return {id : k, name : game.i18n.localize(this.actor.system.combat.hitLocations[k].label)};\n        });\n            \n        let location = (await DocumentChoice.create(locations, 1))[0].id;\n            \n        let protection = this.actor.system.combat.hitLocations[location].items.filter(i => i.type == \"protection\");\n        let item;\n        if (protection.length > 1)\n        {\n            item = (await DocumentChoice.create(protection, 1))[0];\n        }\n        else \n        {\n            item = protection[0];\n        }\n\n        await item.update({[\"system.damage.\" + location] : this.effect.sourceTest.result.SL});\n        this.script.scriptMessage(item.name + \" damaged by \" + this.effect.sourceTest.result.SL);",
            "iYEiyACRltrj6hfN": "return args.data.skill != \"logic\"",
            "WIRaWcvtYgG2UdIX": "return args.data.skill == \"logic\" && args.skillItem?.name == \"Mathematics\"",
            "qpzYiCvPRlsOCNxw": "return args.data.skill != \"intuition\"",
            "wKPGtlm3tawFGDqV": "return args.skillItem?.name == \"People\"",
            "8NCgMl1O5bG0tfqX": "return args.data.skill != \"awareness\"\n\n",
            "YIx7MdSQTMwQi2pE": "return args.data.skill == \"awareness\" && args.skillItem?.name == \"Smell\"\n\n",
            "MniN5Mz6iTajOBe3": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"MYESOCTsSmjMdk48\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.hand\" : hand});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.split(\"(\")[0] + `(${locationName})`\ninjury.system.location.value = location;\n\nif (this.actor.type == \"character\")\n{\n    await this.actor.update(this.actor.system.hands.toggle(hand));\n}\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "JAk7wyq44VDJuTAn": "let spec = args.actor.items.get(args.data.skillItemId);\nreturn (!spec || spec.system.skill != \"rapport\" || spec.name != \"Inquiry\")",
            "CHJlbALBrlhMjpVa": "this.actor.addCondition(\"frightened\");",
            "zdTSiJO0GcbpBABW": "let injury = (await game.impmal.utility.findId(\"BUjBUUB42vTh3aKD\")).toObject()\n\ninjury.name = injury.name.split(\"(\")[0] + `(Hip)`\ninjury.system.location.value = \"rightLeg\"; // Arbitrary\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "YTLnF7rK9bM6Sqmw": "return ![\"str\", \"ws\", \"bs\", \"ag\"].includes(args.data.characteristic)",
            "aGLJGzBDcgllwtKe": "return [\"ws\", \"bs\", \"ag\"].includes(args.data.characteristic)",
            "kTkhFYLuY8IyZNGH": "        if (args.opposed?.attackerTest?.item?.type == \"power\")\n        {\n            args.modifiers.push({value : -this.actor.system.characteristics.wil.bonus, label : game.i18n.localize(this.effect.name)});\n        }",
            "SURMeHZV3dr1xzk4": "        if (args.context.resist?.includes(\"power\") && !args.context.psychicCastigation && args.context.resistingTest?.result?.SL < args.result.SL) \n        {\n            args.context.psychicCastigation = true;\n            // Need to apply an effect because there will be permissions issues if we just apply damage directly (for players)\n            let damageEffect = this.item.effects.get(\"McpFyX27K8ECVS4H\").toObject();\n            damageEffect.flags.impmal.applicationData.type == \"document\";\n\t        damageEffect.flags.impmal.damage =  args.result.SL - args.context.resistingTest?.result?.SL;\n            args.context.resistingTest.actor.applyEffect({effectData : [damageEffect]});\n        }",
            "NdLZw5sQ0lkCtQt4": "        let damage = this.effect.flags.impmal?.damage || 0;\n        this.actor.applyDamage(damage, {ignoreAP : true});\n        this.script.scriptMessage(damage + \" applied to <strong>\" + this.actor.name + \"</strong>\");",
            "O6CcQZlyAu0pDA09": "return ![\"ws\", \"bs\", \"str\", \"ag\"].includes(args.data.characteristic);",
            "IWK4G7vGETuFaA03": "return args.data.skill == \"athletics\" || args.data.characteristic == \"ag\"",
            "56BPcZag5pws7yGA": "let injury = (await game.impmal.utility.findId(\"eSCwgUinPiAGesac\")).toObject()\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "e8UZrjNNwpNRzmnP": "return ![\"str\", \"ag\"].includes(args.data.characteristic)",
            "kzKJJInHPxc1CAiU": "return [\"str\", \"ag\"].includes(args.data.characteristic)",
            "Q5U2ckGDNridV6jr": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"FqNmgPQo3it7Wlgf\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.hand\" : hand});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.split(\"(\")[0] + `(${locationName})`\ninjury.system.location.value = location;\n\nif (this.actor.type == \"character\")\n{\n    await this.actor.update(this.actor.system.hands.toggle(hand));\n}\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "ojP27z7Ol7luKrB5": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"cHYtB7pCpwTOW1We\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.hand\" : hand});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.replace(\"Finger\", locationName.split(\" \")[0] + \" Finger\");\ninjury.system.location.value = location;\n\nif (this.actor.type == \"character\")\n{\n    await this.actor.update(this.actor.system.hands.toggle(hand));\n}\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "NsXl1lgf6A4Pdd7y": "return !args.data.weapon?.system?.equipped?.offhand",
            "smIP3qOOIT1E1zXg": "return args.data.weapon?.system?.equipped?.offhand",
            "bQHx23AfuFsHToda": "        if (!args.context.psychicFlood)\n        {\n\n            let gain = 0;\n            await Dialog.wait({\n                title : this.effect.name,\n                content: \"<p>Warp Charge / SL Gained</p><input type='number' value='0'/>\",\n                buttons : {\n                    confirm : {\n                        label : game.i18n.localize(\"Confirm\"),\n                        callback : (dlg) => \n                        {\n                            let input = dlg.find(\"input\")[0];\n                            gain = Math.max(0, Number(input.value));\n                        }\n                    }\n                },\n                default : \"confirm\"\n            });\n            args.context.psychicFlood = gain;\n            args.context.tags.push(\"Psychic Flood: \" + gain);\n            await this.actor.update({\"system.warp.charge\" : this.actor.system.warp.charge += gain});\n        }",
            "RCLrSY1IEliqh3IZ": "if (args.succeeded && args.context.psychicFlood)\n{\n    args.result.SL += args.context.psychicFlood;\n}",
            "m8dqaM2QLjzp3ZDk": "let injury = (await game.impmal.utility.findId(\"b2oWmRETjNtrzEij\")).toObject()\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "8mWkEriCN0W1uWuD": "return ![\"str\", \"ws\", \"bs\", \"ag\", \"tgh\"].includes(args.data.characteristic)",
            "w227ndBQec1YTXxw": "return [\"str\", \"ws\", \"bs\", \"ag\", \"tgh\"].includes(args.data.characteristic)",
            "GCZAtgnXvAUOsD5X": "return ![\"awareness\", \"intuition\"].includes(args.data.skill);",
            "g2arAOavLos1hfaV": "return [\"awareness\", \"intuition\"].includes(args.data.skill);",
            "V6i6wWfr2nCtaPDa": "return !args.data.weapon && !args.data.power",
            "JPjjzr9AUyeVShjt": "let spec = args.actor.items.get(args.data.skillItemId);\nreturn (spec.name == \"Fear\")",
            "6bVKkkRhgtVR6J91": "this.actor.update({\"system.fate.max\" : this.actor.system.fate.max + 1})",
            "Mt599MP5v9o4r50D": "return !args.data.weapon?.system?.isMelee",
            "SyMVEQMOQOBkwJGy": "return args.fields.hitLocation != \"roll\"",
            "dRu6FYZgUuKwKthO": "return [\"per\", \"wil\", \"int\"].includes(args.data.characteristic)",
            "glatLZB1vHxOxrZm": "return args.isAttack && args.actor.type == \"character\" && args.weapon && args.actor.system.hands[this.item.system.location.value].id == args.weapon.id",
            "Xt5I00gpRxHDvBRX": "        let changes = [];\n        if ([\"Astra Militarum\", \"Imperial Fleet\", \"Rogue Trader Dynasty\"].includes(this.actor.system.faction.document?.name))\n        {\n            changes.push({key : \"system.influence.factions.adeptus-ministorum.modifier\", value : 1});\n        }\n\n        else if ([\"Adeptus Ministorum\"].includes(this.actor.system.faction.document?.name))\n        {\n\n            let factionOptions = Object.keys(game.impmal.config.factions).filter(i => [\"astra-militarum\", \"imperial-fleet\"].includes(i)).map(i => { return {name : game.impmal.config.factions[i], id : i};});\n            let choices = await DocumentChoice.create(factionOptions, 1);\n            if (choices.length)\n            {\n                changes.push({key : \"system.influence.factions.\" + choices[0].id + \".modifier\", value : 1});\n            }\n        }\n\n        this.effect.updateSource({changes});",
            "xBULiV809FDmxLYQ": "    let lostTeeth = this.actor.getFlag(\"impmal\", \"lostTeeth\") || 0;\n    lostTeeth += this.item.getFlag(\"impmal\", \"lostTeeth\") || 1;\n    setProperty(this.actor, \"flags.impmal.lostTeeth\", lostTeeth);",
            "fntZ1Jf2mRUT9RCM": "    if (!this.actor.system.skills.rapport.lostTeethModified)\n    {\n        let lostTeeth = this.actor.getFlag(\"impmal\", \"lostTeeth\");\n        let modifier = Math.floor(lostTeeth / 2);\n        this.actor.system.skills.rapport.modifier = -1 * modifier;\n        this.actor.system.skills.rapport.lostTeethModified = true;\n    }",
            "T5hjRWkwzcmZuE7K": "args.encumbrance.overburdened += args.characteristics.str.bonus;\nargs.encumbrance.restrained += (2 * args.characteristics.str.bonus);",
            "f1cITItMc8AXk8NZ": "        let test = await this.actor.setupSkillTest({key : \"fortitude\", name : \"Endurance\"}, {title : {append : ` – ${this.effect.label}`}});\n\nif (test.result.SL < this.effect.sourceTest.result.SL)\n{\n     this.actor.addCondition(\"blinded\", {flags : {impmal : {sunburst : 1}}});\n}\nelse \n{\n    this.effect.delete();\n}",
            "U5zhqeNQuRDqWFJb": "\n        let blinded = this.actor.hasCondition(\"blinded\");\n        let num = blinded?.getFlag(\"impmal\", \"sunburst\");\n        if (blinded && num)\n        {\n            this.actor.setupSkillTest({key : \"fortitude\", name : \"Endurance\"}, {title : {append : ` – ${this.effect.label}`}}).then(test => {\n                if (test.result.SL < this.effect.sourceTest.result.SL)\n                {\n                    num++;\n                    blinded.setFlag(\"impmal\", \"sunburst\", num);\n                    if (num >= 3)\n                    {\n                        this.script.scriptMessage(\"<strong>Blinded</strong> is now permanent\");\n                        this.effect.delete();\n                    }\n                } \n                else \n                {\n                    blinded.delete();\n                }\n            });\n        }",
            "d3OE8lQF3xp9G4KU": "await this.actor.hasCondition(\"poisoned\")?.delete();\nawait this.actor.hasCondition(\"stunned\")?.delete();",
            "XZNKWSBHqDY5Htzc": "        let SL = this.effect.sourceTest?.result.SL;\n        let penetrating = args.system.traits.list.find(i => i.key == \"penetrating\");\n        if (penetrating)\n        {\n            penetrating.value = Math.max(penetrating.value, SL);\n        }\n        else \n        {\n            args.system.traits.list.push({key : \"penetrating\", value : SL});\n        }",
            "uJkI6C2t3DDjFkP5": "args.fields.SL += this.actor.system.characteristics.wil.bonus",
            "34ZBVczi74ZvnZAU": "this.effect.update({disabled : true})",
            "HcSL5qqSa108oI9w": "        let items = (await game.impmal.utility.getAllItems([\"equipment\", \"weapon\", \"modification\", \"protection\", \"augmetic\"])).filter(i => i.system.encumbrance.value == 0);\n\n        let choice = await DocumentChoice.create(items, 1)\n\n        if (choice.length) {\n            if (choice[0].system.cost > this.actor.system.solars)\n            {\n                return ui.notifications.error(\"Not Enough Solars!\");\n            }\n            this.actor.createEmbeddedDocuments(\"Item\", choice).then(items => {\n                this.actor.update({\n                    \"system.solars\": this.actor.system.solars - items[0].system.cost\n                })\n            })\n        }",
            "Tm0FrljPF6wVL4Pb": "this.actor.addCondition(\"restrained\");",
            "8l9r2bEv7vEytvgk": "let spec = args.actor.items.get(args.data.skillItemId);\nreturn (!spec || spec.system.skill != \"lore\" || spec.name != \"Forbidden\")",
            "Hgo2aujTA3r6iKax": "return !args.data.weapon",
            "8Dq26dUwROfW0ak3": "return args.data.characteristic != \"str\"",
            "4XL8be7lCjZ2zP9N": "return args.data.characteristic == \"str\"",
            "xs8zuATQW1bPtwD5": "args.fields.SL -= 1;",
            "foouKm9EG75YeU7q": "return args.data.skill != \"dexterity\"",
            "bxUM3WiokVpfTGgS": "return args.data.skill == \"dexterity\"",
            "ZwlW3MhoKOr0P261": "//args.context.addedEffects = args.context.addedEffects.concat([\"blinded\", \"deafened\"])",
            "lAX658kNIyT4IhNj": "        let skills = (await Promise.all([\"0WV8IJuVkxLdOuem\", \"1OMDatjP2PW1oufq\", \"z3pFUwFlp4BJf1oJ\"].map(game.impmal.utility.findId)))\n            .filter(i => !this.actor.itemTypes.specialisation\n                .find(actorSkill => actorSkill.name == i.name && actorSkill.system.skill == i.system.skill))\n            .map(i => i.toObject());\n        skills.forEach(i => \n        {\n            i.name = game.impmal.config.skills[i.system.skill] + \" (Forbidden) \";\n\t    i.id = i._id;\n        });\n\n        let choice = await DocumentChoice.create(skills, 1);\n\n\tchoice[0].name = \"Forbidden\"\n\n        this.actor.createEmbeddedDocuments(\"Item\", choice);",
            "l5WEnwfnHwmftia4": "        let ownWP = this.actor.system.characteristics.wil.total;\n        let casterWP = ChatMessage.getSpeakerActor(this.effect.sourceTest.context.speaker).system.characteristics.wil.total;\n        if (casterWP > ownWP)\n        {\n            args.fields.modifier = casterWP - ownWP;\n        }\n        args.advCount++;",
            "6WFGP2YlK24muC6O": "return args.data.characteristic != \"wil\"",
            "TRx4I20jcVS4KbyJ": "return args.data.characteristic == \"wil\"",
            "ZcahcEBpOCPMGKb3": "if (args.data.system?.corruption?.value > this.actor.system.corruption?.value)\n{\n\targs.data.system.corruption.value++;\n\tthis.script.scriptMessage(\"Extra Corruption Point Gained\");\n\tthis.script.scriptNotification(\"Extra Corruption Point Gained\");\n}",
            "mwXwNP2e6lyAakMH": "return !([\"awareness\"].includes(args.data.skill) || args.weapon?.system?.isRanged)",
            "47cWCiVkk7kBF1Uv": "return args.skillItem?.name == \"Sight\" || args.weapon?.system?.isRanged",
            "cxS1Ib6Tgi9ZeNXy": "args.data.onlyAutomaticSuccess = true",
            "7gkMgVciq8YZZUg7": "return ![\"melee\", \"reflexes\"].includes(args.data.skill);",
            "TO7vWwN9h1xOoeeg": "return args.data.skill == \"melee\" || args.skillItem?.name == \"Dodge\"",
            "1G88kG3GaJlRX2IR": "let injury = (await game.impmal.utility.findId(\"8GAejJkquUPdErQj\")).toObject()\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "G8qm7uiPju3lDCeq": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"bHbJPwCbgCVkCbif\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.hand\" : hand});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.split(\"(\")[0] + `(${locationName})`\ninjury.system.location.value = location;\n\nif (this.actor.type == \"character\")\n{\n    await this.actor.update(this.actor.system.hands.toggle(hand));\n}\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "QOpqqTPceFmCTYNa": "        let test = await this.actor.setupSkillTest({key : \"discipline\", name : \"Fear\"}, {fields : {difficulty : \"difficult\"}, title : {append : \" - \" + this.effect.name}})\n        if (test.failed)\n        {\n            this.actor.addCondition(\"frightened\");\n        }",
            "u7gTMNESJO16BfW5": "    let test = await this.actor.setupSkillTest({key : \"fortitude\", name : \"Pain\"}, {title : {append : \" - \" + this.effect.name}});\n\n    if (test.succeeded)\n    {\n        await this.actor.addCondition(\"stunned\");\n    }\n    else \n    {\n        await this.actor.addCondition(\"incapacitated\");\n        await this.actor.addCondition(\"prone\");\n    }\n    \n    let teeth = (await game.impmal.utility.findId(\"GvHZsCJUIJ32TVhe\")).toObject();\n    let injury = (await game.impmal.utility.findId(\"MgCNNlz6oIdeo99L\")).toObject();\n    \n    let teethRoll = new Roll(\"1d10\");\n    await teethRoll.roll();\n    \n    teethRoll.toMessage({speaker : {alias : this.effect.name}, flavor : \"Teeth Lost\"});\n    \n    teeth.name = teeth.name.replace(\"Teeth\", `${teethRoll.total} Teeth`);\n    setProperty(teeth, \"flags.impmal.lostTeeth\", teethRoll.total)\n    \n    this.actor.createEmbeddedDocuments(\"Item\", [teeth, injury]);",
            "h2MrvI0zeFxpDKIE": "        if (args.data.system?.fate?.value < this.actor.system.fate?.value)\n        {\t\n            ChatMessage.implementation.corruptionMessage(\"minor\", {}, {speaker: {alias : this.effect.name}});\n        }",
            "9Wl1lU6OSQ9mihRq": "this.actor.update({\"system.fate.max\" : this.actor.system.fate.max + 1});\n        this.script.scriptNotification(\"Gained 1 Fate\");",
            "Xv5kvj6TgD2MyfXB": "return !args.fields.rapidFire",
            "r6Zyy2nf7yO3YEWE": "        if (args.data.weapon.system.mag.current >= Number(args.data.weapon.system.traits.has(\"rapidFire\").value) * 2)\n        {\n            args.data.context.fullAutoFanatic = true;\n        }\n        else \n        {   \n            ui.notifications.error(\"Not enough ammo for \" + this.effect.name);\n            throw new Error(\"Not enough ammo for \" + this.effect.name);\n        }\n",
            "eVp60aZwBQqacdGS": "        if (args.context.fullAutoFanatic) \n        {\n            args.result.tags.fullAutoFanatic = this.effect.name;\n\t    args.result.text.fullAutoFanatic = \"Affects all creatures within Close Range of the target\"\n            args.context.additionalAmmoUsed += args.computeAmmoUsed();\n        }",
            "KD7McjCvrxtdpzQ2": "this.actor.addCondition(\"blinded\", {duration : {rounds : 3}});",
            "mWJZyZvlCRIV4IJ1": "let injury = (await game.impmal.utility.findId(\"QAcwzyxchW3ihCfd\")).toObject()\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "IEBxTD2DMp2NAgkF": "        let test = await this.actor.setupSkillTest({key : \"discipline\", name : \"Fear\"}, {title : {append : \" - \" + this.effect.name}})\n        if (test.failed)\n        {\n            this.actor.addCondition(\"frightened\");\n        }",
            "MCzYYTFe1kpGHs7l": "return args.data.weapon || args.data.power",
            "JjyiHkKRDBb6RYlq": "        let location = this.effect.getFlag(\"impmal\", \"location\");\n        if (location)\n        {\n            args.system.combat.hitLocations[location].armour++;\n            args.system.combat.hitLocations[location].sources.push({name : this.effect.name, value : 1}) \n        }",
            "2QUNwoSgjTrWeZqz": "setProperty(this.actor, \"flags.impmal.eyesLost\", this.actor.flags.impmal?.eyesLost || 0)\n\nthis.actor.flags.impmal.eyesLost++;\n\nif (this.actor.flags.impmal.eyesLost >= 2 && !this.actor.hasCondition(\"blinded\"))\n{\n    this.actor.addCondition(\"blinded\");\n}",
            "AxOlBrKoqY17Pebt": "return args.data.skill != \"awareness\" || (this.actor.getFlag(\"impmal\", \"eyesLost\") || 0) != 1\n\n",
            "Fh4C7WHQYiiCG305": "args.advCount += 1;",
            "9duY6UVXWYbfgXSU": "return args.data.skill != \"athletics\"",
            "IoijEGENv5ZkRvJv": "return args.data.skill == \"rapport\"",
            "EuWwRXoOpsTEumSC": "let injury = (await game.impmal.utility.findId(\"3i9nky5HtLkB0PCz\")).toObject()\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "CHN2DwYzZZgpDeWK": "        let roll = Math.ceil(CONFIG.Dice.randomUniform() * 10);\n        let hitloc = this.actor.system.combat.hitLocations[this.actor.system.combat.hitLocAt(roll)];\n\n        if (hitloc?.label)\n        {\n            this.item.updateSource({name : `${this.effect.name} (${game.i18n.localize(hitloc.label)})`});\n            this.script.scriptMessage(`<a class=\"inline-roll\" data-tooltip=\"1d10\"><i class=\"fas fa-dice-d20\"></i> ${roll}</a>: ${game.i18n.localize(hitloc.label)}`, {whisper : ChatMessage.getWhisperRecipients(\"GM\").map(i => i.id)});\n        }",
            "KhYkdm8m6o8615st": "        if (!args.opposed.attackerTest.item?.system.isMelee)\n        {\n            return;\n        }\n        let applyBleeding = await Dialog.wait({\n            title : this.effect.label,\n            content : `<p><strong>${this.effect.label}</strong>: Inflict Bleeding intead of Damage?`,\n            buttons : {\n                yes : {\n                    label : game.i18n.localize(\"Yes\"),\n                    callback : () => \n                    {\n                        return true;\n                    }\n                },\n                no : {\n                    label : game.i18n.localize(\"No\"),\n                    callback : () => \n                    {\n                        return false;\n                    }\n                }\n            }\n        });\n\n        if (applyBleeding)\n        {\n            await args.actor.addCondition(\"bleeding\");\n            args.critical = false;\n            args.woundsGained = 0;\n            args.text = `0 Wounds, Applied Bleeding (${this.effect.name})`\n        }",
            "UjQg8d2lSb0p0Svc": "        let stunned = this.actor.hasCondition(\"stunned\");\n\n        if (stunned)\n        {\n            let test = await this.actor.setupSkillTest({key : \"fortitude\", name : \"Endurance\"}, {title : {append : \" - \" + this.effect.label}})\n            if (test.succeeded)\n            {\n                this.script.scriptMessage(\"Removed Stunned\");\n                stunned.delete();\n            }\n        }",
            "GHVp5gjOkjuADg8x": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet leg = location.split(\"Leg\")[0]; // Get leg side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"BUjBUUB42vTh3aKD\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.leg\" : leg});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.split(\"(\")[0] + `(${locationName})`\ninjury.system.location.value = location;\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "w3i6c83d4xNP09Ay": "args.fields.SL += 2",
            "GFFFiFxzKOWQ4iNx": "let spec = args.actor.items.get(args.data.skillItemId);\nreturn (!spec || spec.system.skill != \"presence\" || (spec.name != \"Interrogation\" && spec.name != \"Intimidation\"))",
            "0YwtPhbG5iZthE5m": "            let factionOptions = Object.keys(game.impmal.config.factions).map(i => { return {name : game.impmal.config.factions[i], id : i};});\n                \n            let choices = await DocumentChoice.create(factionOptions, 1);\n            if (choices.length)\n            {\n                this.effect.update({changes : [{key : \"system.influence.factions.\" + choices[0].id + \".modifier\", value : -1}]});\n            }\n",
            "1Y13ExGDrHHVtzRo": "let effects = [];\neffects.push(this.actor.hasCondition(\"bleeding\"))\neffects.push(this.actor.hasCondition(\"frightened\"))\neffects.push(this.actor.hasCondition(\"stunned\"))\neffects.push(this.actor.hasCondition(\"unconscious\"))\nawait this.actor.deleteEmbeddedDocuments(\"ActiveEffect\", effects.filter(e => e).map(e => e.id))\n\nthis.actor.applyDamage(Math.max(0, 4 - this.effect.sourceTest?.result?.SL), {ignoreAP : true})",
            "wkOHJ4TiVIvBCXIw": "return !args.data.context.twf",
            "Gwr9hiNzg0Xs1R9N": "return args.data.context.twf",
            "2dqZRh2YYmnJk8yT": "args.disCount++;\nif (args.fields.difficulty != \"hard\" || args.fields.difficulty != \"veryHard\")\n{\n    args.fields.difficulty = \"hard\"\n}",
            "V2j5yg6O6IGsqgYR": "        if (args.skillItem?.name == \"Intimidation\") args.fields.SL+=2;\n        else args.fields.SL-=2;",
            "1uN3vL8EWKVTNAOi": "        this.actor.system.combat.armourModifier += this.effect.sourceTest.result.SL;\n        for (let loc in this.actor.system.combat.hitLocations)\n        {\n            this.actor.system.combat.hitLocations[loc].sources.push({name : this.effect.name, value : this.effect.sourceTest.result.SL});\n        }\n",
            "TxbEIXQkMcBjzv6b": "let isEnergy = [\"flamer\", \"las\", \"melta\", \"plasma\"].includes(args.opposed?.attackerTest?.item?.system?.category)\n\n\nif (isEnergy)\n{\n\targs.modifiers.push({value : this.effect.sourceTest.result.SL, label : this.script.label})\n}\n\n\n",
            "YaYBfd8MfcJYl8Te": "if (args.woundsGained > 0)\n{\n\tthis.script.scriptMessage(`All creatures within Immediate Range suffer \n[[/r ${args.woundSGained}]] Damage`)\n}",
            "VDvj0zqWa1Pe8q5d": "        if (!args.context.blackouts && args.result.fumble)\n        {\n            args.context.blackouts = true;\n            this.actor.setupSkillTest({key : \"fortitude\", name : \"Endurance\"}, {title : {append : \" - \" + this.effect.name}}).then(test => \n            {\n                if (test.failed)\n                {\n                    this.actor.addCondition(\"incapacitated\", {duration : {rounds : Math.ceil(CONFIG.Dice.randomUniform() * 10)}});\n                }\n            });\n        }",
            "Bi27fBq8NniB45vH": "        let location = this.item.system.location.value; // Get location chosen\n        let locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\n        let hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\n\n        let injury = (await game.impmal.utility.findId(\"bHbJPwCbgCVkCbif\")).toObject()\n        this.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.hand\" : hand});\n        this.item.updateSource({name : `${this.item.name} (${locationName})`});\n\n        injury.name = injury.name.split(\"(\")[0] + `(${locationName})`\n        injury.system.location.value = location;\n        \n\n        let roll = new Roll(\"max(1d10 - 5, 0)\");\n        await roll.roll();\n\n        roll.toMessage({speaker : {alias : this.item.name}, flavor : \"Fingers Lost\"})\n\n        let amputation\n        if (roll.total > 0)\n        {\n            amputation = (await game.impmal.utility.findId(\"cHYtB7pCpwTOW1We\")).toObject()\n            amputation.system.location.value = location;\n            setProperty(amputation, \"flags.impmal.lostFingers\", roll.total);\n            amputation.name = amputation.name.replace(\"Finger\", `${roll.total} ${locationName.split(\" \")[0]} Finger` + (roll.total > 1 ? \"s\" : \"\"));\n        }\n\n        if (this.actor.type == \"character\")\n        {\n            await this.actor.update(this.actor.system.hands.toggle(hand));\n        }\n\n        await this.actor.createEmbeddedDocuments(\"Item\", [injury, amputation].filter(i => i));",
            "GyF8MFQIdvV4fTOu": "return args.skillItem?.name == \"Sound\" || args.skillItem?.name == \"Hearing\"",
            "63Vm8IqWKo0yTaot": "this.actor.system.combat.speed.land.value = \"fast\";",
            "5wgV852yPpP4sM9D": "return !args.isAttack || !args.data.item?.system.isMelee",
            "tf9bDdQ3xKj2RhaN": "return args.data.skill != \"medicae\"",
            "uu8uiBCEDRnyIhwk": "        let test = await this.actor.setupSkillTest({key : \"fortitude\", name : \"Pain\"}, {title : {append : \" - \" + this.script.label}})\n        if (test.failed)\n        {\n            this.actor.addCondition(\"incapacitated\")\n        }",
            "VzxV0c6W0MTb3yJL": "        let skills = args.actor.itemTypes.specialisation.filter(s => [\"tech\", \"lore\", \"logic\"].includes(s.system.skill));\n\n        let chosen = (await DocumentChoice.create(skills, 1))[0]\n\n        if (chosen)\n        {\n            await chosen.update({\"system.advances\" : chosen.system.advances + 1});\n            args.actor.update({\"system.xp.other.list\" : args.actor.system.xp.other.add({description : `${this.effect.name} (${chosen.name})`, xp: -20})})\n        }",
            "bNWB7RTpUBdM2G8L": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\nif (this.actor.type == \"character\")\n{\n    await this.actor.update(this.actor.system.hands.toggle(hand));\n}",
            "HpFu3YdnSwM7xs6d": "let lostFingers = this.actor.getFlag(\"impmal\", \"lostFingers\") || 0;\n        lostFingers += this.item.getFlag(\"impmal\", \"lostFingers\") || 1;\n        setProperty(this.actor, \"flags.impmal.lostFingers\", lostFingers);",
            "T6hEA3DHUH0XV8c4": "        let lostFingers = this.actor.getFlag(\"impmal\", \"lostFingers\") || 0;\n        if (this.actor.system.hands[this.item.system.location.value].id == args.context.weapon.id && lostFingers < 5 && lostFingers > 0 && args.result.outcome == \"failure\")\n        {\n            let ones = Number(args.result.roll.toString().split(\"\").pop());\n            if (ones <= lostFingers)\n            {\n                args.result.fumble = true;\n\t\t        args.result.text[\"lostFingerFumble\"] = \"Fumbled due to lost fingers\"\n            }\n        }",
            "B3u6OoC75TtOmz7k": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet leg = location.split(\"Leg\")[0]; // Get leg side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"wBFH7XeivMbTrjhF\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.leg\" : leg});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.replace(\"Toes\", locationName.split(\" \")[0] + \" Toe\");\ninjury.system.location.value = location;\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "NiExLKzsdjCC7tu1": "![\"athletics\", \"melee\", reflexes\"].includes(args.data.skill)",
            "C0ta3mlQ5yEiQjYr": "returned args.data.other.resist == \"restrained\"",
            "SguGysouzK6CTVsN": "        if (args.type == \"critical\")\n        {\n            let test = await this.actor.setupSkillTest({name : \"Theology\", key : \"lore\"}, {title : {append: \" – \" + this.effect.name}})\n            if (test.succeeded)\n            {\n                this.script.scriptMessage(`Ignore Critical effects for ${this.actor.system.characteristics.wil.bonus} Rounds`)\n            }\n        }",
            "WmkqPglPptnDEHup": "let injury = (await game.impmal.utility.findId(\"b2oWmRETjNtrzEij\")).toObject()\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "OQb3htDAjCmcEIeW": "let skills = args.actor.itemTypes.specialisation.filter(s => [\"Sight\", \"Hearing\", \"Investigation\", \"Tracking\", \"Interrogation\", \"Inquiry\"].includes(s.name) || [\"discipline\", \"intuition\"].includes(s.system.skill));\n\nlet chosen = (await DocumentChoice.create(skills, 1))[0]\n\nif (chosen)\n{\n    await chosen.update({\"system.advances\" : chosen.system.advances + 1});\n    await args.actor.update({\"system.xp.other.list\" : args.actor.system.xp.other.add({description : `${this.effect.name} (${chosen.name})`, xp: -20})})\n}",
            "TAWdO9KLH6T8BCI0": " if (!args.opposed.attackerTest.data.rapidFire)\n        {\n            return;\n        }\n        let applyRestrained = await Dialog.wait({\n            title : this.effect.label,\n            content : `<p><strong>${this.effect.label}</strong>: Attempt to inflict Restrained intead of Damage?`,\n            buttons : {\n                yes : {\n                    label : game.i18n.localize(\"Yes\"),\n                    callback : () => \n                    {\n                        return true;\n                    }\n                },\n                no : {\n                    label : game.i18n.localize(\"No\"),\n                    callback : () => \n                    {\n                        return false;\n                    }\n                }\n            }\n        });\n\n        if (applyRestrained)\n        {\n            args.actor.setupSkillTest({key : \"discipline\", name : \"Fear\"}, {title : {append : \" - \" + this.effect.name}}).then(test => \n            {\n                if (test.result.SL < args.opposed.attackerTest.result.SL)\n                {\n                    args.actor.addCondition(\"restrained\");\n                }\n            });\n            args.critical = false;\n            args.woundsGained = 0;\n            args.text = `0 Wounds, Applied Restrained (${this.effect.name})`;\n        }",
            "vThmlbAWvESsAh3S": "return ![\"str\", \"ag\"].includes(args.data.characteristic);",
            "LBnXCV3kGeHC82Rf": "return [\"str\", \"ag\"].includes(args.data.characteristic);",
            "xkgp2crn1xOza1dP": "setProperty(this.actor, \"flags.impmal.earsLost\", this.actor.flags.impmal?.earsLost || 0)\n\nthis.actor.flags.impmal.earsLost++;",
            "h46CNIpXK8awVd46": "let hidden = args.data.skill != \"awareness\" || (this.actor.getFlag(\"impmal\", \"earsLost\") || 0) < 2 || args.lostEarShown\n\nif (!hidden)\n{\n\targs.lostEarShown = true; // Prevents this being shown twice\n}\nreturn hidden",
            "H5iumU7n8L1bNyJa": "return args.data.skill == \"awareness\" && args.skillItem?.name == \"Hearing\" && (this.actor.getFlag(\"impmal\", \"earsLost\") || 0) >= 2",
            "QKhS65WLfEADSOsJ": "this.actor.setupSkillTest({key : \"discipline\"}, {fields: {difficulty : \"difficult\"}, title : {append : \" - \" + this.effect.name}})",
            "6lNghRC3gOmD4CwT": "// This would be cleaner in its own Item effect\n// But I want it to be in the same effect as the strength bonus\n// So it's easier to toggle\nif (this.item.uuid == args.uuid)\n{\n\targs.system.encumbrance.value = 0;\n}",
            "KlaESspjOoVqiJZz": "// We want to be able to toggle the power armour armour, but we don't want it to be enabled if the power armour itself is inactive\n\n// This is why we can't make a conditional script - we wont it to be toggleable off when the item is worn\n\nif (!this.effect.disabled && !this.item.system.isEquipped)\n{\n\tui.notification.error(\"Cannot activate while Item is unequipped\");\n\tthis.effect.update({disabled : true});\n}",
            "weL1AMkTeDCGUkMy": "return !args.data.item?.system?.isRanged && args.data.skill != \"awareness\"",
            "TiXSwxW84yx2a35O": "return args.data.item?.system?.isRanged || (args.data.skill == \"awareness\" && args.skillItem?.name == \"Sight\")",
            "mI2znx2zEeLSd1Wn": "args.fields.SL+=2;",
            "OsuD0mR3QvNLrirp": "if (args.type == \"weapon\" && !args.system.traits.has(\"subtle\") && !args.system.traits.has(\"twohanded\"))\n{\n   args.system.traits.add(\"defensive\", {modify: true})\n}",
            "zekV4pv6XUsdnhhx": "return !args.isAttack;",
            "pAVpPwbkqPLpdHYX": "return args.data.targets[0].actor?.uuid == this.effect.origin",
            "Rn1f9plYLLSqRFwh": "if (game.combat.combatant.actor?.uuid == this.effect.origin) this.effect.delete();",
            "BUR9FW2XxUxZ3aDU": "return args.isAttack && data.weapon && !data.weapon.system.traits.has(\"twohanded\")",
            "24yB2j3EPMVHI72K": "this.actor.useAction(\"dodge\")",
            "qZlFmrrIw930oNGk": "let skills = args.actor.itemTypes.specialisation.filter(s => [\"Fear\", \"Human\", \"One-handed\", \"Surface\"].includes(s.name) || [\"athletics\", \"fortitude\", \"ranged\"].includes(s.system.skill));\n\nlet chosen = (await DocumentChoice.create(skills, 1))[0]\n\nif (chosen)\n{\n    await chosen.update({\"system.advances\" : chosen.system.advances + 1});\n    await args.actor.update({\"system.xp.other.list\" : args.actor.system.xp.other.add({description : `${this.effect.name} (${chosen.name})`, xp: -20})})\n}",
            "LJrmGBC9OXzGd2C6": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet leg = location.split(\"Leg\")[0]; // Get leg side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"Vnvx1LZfkLx3elkQ\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.leg\" : leg});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.split(\"(\")[0] + `(${locationName})`\ninjury.system.location.value = location;\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "p1f6nugUozkZYG2w": "    let location = this.item.system.location.value; // Get location chosen\n    let locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\n    let leg = location.split(\"Leg\")[0]; // Get leg side - \"left\" or \"right\"\n    \n    let injury = (await game.impmal.utility.findId(\"uxP0TpajJLHgBfpL\")).toObject()\n    this.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.leg\" : leg});\n    this.item.updateSource({name : `${this.item.name} (${locationName})`});\n    \n    injury.name = injury.name.split(\"(\")[0] + `(${locationName})`\n    injury.system.location.value = location;\n    \n    \n    let roll = new Roll(\"max(1d10 - 5, 0)\");\n    await roll.roll();\n    \n    roll.toMessage({speaker : {alias : this.item.name}, flavor : \"Toes Lost\"})\n    \n    let amputation\n    if (roll.total > 0)\n    {\n        amputation = (await game.impmal.utility.findId(\"wBFH7XeivMbTrjhF\")).toObject()\n        amputation.system.location.value = location;\n        amputation.name = amputation.name.replace(\"Toes\", `${roll.total} ${locationName.split(\" \")[0]} Toe` + (roll.total > 1 ? \"s\" : \"\"));\n        setProperty(amputation, \"flags.impmal.lostToes\", roll.total)\n    }\n    \n    await this.actor.createEmbeddedDocuments(\"Item\", [injury, amputation].filter(i => i));\n",
            "SC7MGFpyvsnwe14M": "return ![\"ws\", \"str\"].includes(args.data.characteristic\")",
            "BwUTOnO47SMJXjqc": "return [\"ws\", \"str\"].includes(args.data.characteristic\")",
            "YTJNr7IPYlcytLbK": "let SL = this.effect.sourceTest?.result?.SL || 0;\nlet strB = args.characteristics.str.bonus;\n\nif (SL > strB)\n{\n    args.characteristics.str.bonus = SL;\n}",
            "FPL7mqCoBPNxFF5l": "args.characteristics.str.bonus += 1;",
            "vEmrAi2As49u9oLY": "        let frightened = this.actor.hasCondition(\"frightened\");\n        if (frightened)\n        {\n            frightened.delete();\n            ui.notifications.notify(`<strong>${this.effect.label}</strong> - Immune to Frightened`);\n        }",
            "YicMTec6Uj4pzPoR": "let skills = args.actor.itemTypes.specialisation.filter(s => [\"Sight\", \"Fear\", \"Surroundings\", \"Long Guns\", \"Pistols\", \"Balance\", \"Dodge\"].includes(s.name) || [\"navigation\", \"piloting\"].includes(s.system.skill));\n\nlet chosen = (await DocumentChoice.create(skills, 1))[0]\n\nif (chosen)\n{\n    await chosen.update({\"system.advances\" : chosen.system.advances + 1});\n    await args.actor.update({\"system.xp.other.list\" : args.actor.system.xp.other.add({description : `${this.effect.name} (${chosen.name})`, xp: -20})})\n}\n",
            "XnyWIQoOwbUIUr6u": "args.fields.modifier += 20",
            "iJ69MIztID5aZJ9Z": "let spec = args.actor.items.get(args.data.skillItemId);\nreturn (!spec || spec.system.skill != \"lore\" || spec.name != \"Theology\")",
            "GabkiOXXWJwUTxq0": "return this.actor.itemTypes.critical.length == 0",
            "hhmPhv7jilG9QQ33": "if (args.type == \"weapon\" && args.system.traits.has(\"subtle\") && args.system.damage.characteristic == \"str\")\n{\n    args.system.damage.characteristic = \"ag\"\n}",
            "NmRbSpqE0msmzbYO": "this.actor.system.combat.armourModifier += this.actor.system.characteristics.tgh.bonus\nif (this.actor.system.characteristics.tgh.bonus > this.actor.system.characteristics.str.bonus)\n{\n   this.actor.system.combat.speed.land.modifier--; \n}",
            "vILqGbCleH5BOejz": "return args.data.characteristic != \"ag\" || (this.actor.system.characteristics.tgh.bonus <= this.actor.system.characteristics.str.bonus)",
            "boZuknGdy2WcvSd9": "return args.data.characteristic == \"ag\" && (this.actor.system.characteristics.tgh.bonus > this.actor.system.characteristics.str.bonus)",
            "VFugNpuvUGjj27kf": "ui.notifications.notify(\"Cannot target Heavily Obscured target with Ranged Attacks\");",
            "biFsCPl9L92RbfLL": "return !args.weapon?.system?.isRanged",
            "VVKEI5ZcmQnqViEW": "return args.weapon?.system?.isRanged",
            "XVTXGavQWbCcdhzh": "await this.actor.addCondition(\"blinded\").then(condition => condition.setFlag(\"impmal\", \"fromZone\", this.effect.getFlag(\"impmal\", \"fromZone\")))",
            "UDtTAGvJXbcxpIWr": "return args.data.skill != \"stealth\" || args.skillItem?.name != \"Hide\" || (this.actor.itemTypes.protection.filter(i => i.system.isEquipped).length != 0)",
            "DWkkxPnfNIdT0xvQ": "return args.data.skill == \"stealth\" && args.skillItem.name == \"Hide\"",
            "yWO9I2020xIXUhKH": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"cHYtB7pCpwTOW1We\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.hand\" : hand});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.replace(\"Finger\", locationName.split(\" \")[0] + \" Finger\");\ninjury.system.location.value = location;\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "eFaCMITnzfjO4gzB": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"vHHDZjKvukQuDV1z\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.hand\" : hand});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.replace(\"Hand\", locationName.split(\" \")[0] + \" Hand\");\ninjury.system.location.value = location;\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "gw78w5jnfcohzls6": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet leg = location.split(\"Leg\")[0]; // Get leg side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"wBFH7XeivMbTrjhF\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.leg\" : leg});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.split(\"(\")[0] + `(${locationName})`\ninjury.system.location.value = location;\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "3mpid5QNeNewid7v": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet leg = location.split(\"Leg\")[0]; // Get leg side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"uxP0TpajJLHgBfpL\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.leg\" : leg});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.split(\"(\")[0] + `(${locationName})`\ninjury.system.location.value = location;\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "TJL9J0lGOWvxOKkP": "return args.data.characteristic == \"fel\" && args.actor?.system.influence.usePatron",
            "DPM3lkHR5ZyEZSQt": "if (args.round == 0) {this.script.scriptMessage(\"You can draw and fire a Pistol before anyone else\")}",
            "94xSVEXTj6kvOfwk": "return !args.isAttack || ChatMessage.getSpeakerActor(this.effect.sourceTest.context.speaker).uuid != args.actor.uuid",
            "HpwuGL6GtU5BXUUb": "return args.isAttack && ChatMessage.getSpeakerActor(this.effect.sourceTest.context.speaker).uuid == args.actor.uuid",
            "6s425hs4qalFCzRr": "let teeth = (await game.impmal.utility.findId(\"GvHZsCJUIJ32TVhe\")).toObject();\n\nlet teethRoll = new Roll(\"1d10\");\nawait teethRoll.roll();\n\nteethRoll.toMessage({speaker : {alias : this.effect.name}, flavor : \"Teeth Lost\"});\n\nteeth.name = teeth.name.replace(\"Teeth\", `${teethRoll.total} Teeth`);\n\nthis.actor.createEmbeddedDocuments(\"Item\", [teeth]);",
            "rFX6dEt52ad4GTcn": "let spec = args.actor.items.get(args.data.skillItemId);\nreturn (!spec || spec.system.skill != \"intuition\" || spec.name != \"People\")",
            "UZR3vCBBN6EFXudA": "ui.notifications.notify(\"<strong>Field Medicae: </strong> Difficulty cannot be lower than <strong>Challenging</strong\");\nargs.fields.difficulty = \"challenging\";",
            "7iX86rtVSqA5T8eF": "return game.impmal.config.difficulties[args.fields.difficulty]?.modifier < 0",
            "DmgP4MH00PsHBHy4": "        if (this.actor.system.fate.value > 0)\n        {\n            this.scriptNotification(\"Cannot gain Fate Points\", \"error\");\n            this.actor.update({\"system.fate.value\" : 0});\n        }",
            "sgTuJ96yJwdo5b5i": "        let wounds = this.actor.system.combat.wounds;\n        if (wounds.value > 0)\n        {\n            this.script.scriptMessage(\"Regenerates 1 Wound\");\n            this.actor.update({\"system.combat.wounds.value\" : wounds.value - 1});\n        }",
            "PhDDM5JdoBhwecMf": "            let factionOptions = Object.keys(game.impmal.config.factions).map(i => { return {name : game.impmal.config.factions[i], id : i};});\n                \n            let choices = await DocumentChoice.create(factionOptions, 1, {text : \"Select the Faction to switch to\"});\n            if (choices.length)\n            {\n                await this.effect.update({changes : [{key : \"system.influence.factions.\" + choices[0].id + \".modifier\", value : 1, mode : CONST.ACTIVE_EFFECT_MODES.ADD}]});\n\t\targs.actor.reset();\n\t\targs.actor.sheet?.render(true);\n            }\n",
            "3rbwDLk4oqmtTRa4": "return (args.isAttack || args.power)",
            "68RYzCHGeREmt5kA": "return this.item.system.taken < 2 || args.isAttack || args.power",
            "D9Q04ATHRNmiHsAl": "        if (getProperty(args, \"data.system.influence.usePatron\"))\n        {\n            (await new Roll(\"1d10\").roll()).toMessage({speaker : {alias : this.effect.name}});\n        }",
            "lXmBRGuwdu8XUL75": "args.fields.modifier += 10;",
            "HveqAOR5etcMXlAm": "return args.isAttack || [\"athletics\", \"awareness\", \"dexterity\", \"fortitude\", \"lore\", \"medicae\", \"melee\", \"navigation\", \"ranged\", \"reflexes\"].includes(args.data.skill)",
            "XoQNaBIKYtnnDCOi": "        let roll1 = Math.ceil(CONFIG.Dice.randomUniform() * 10);\n        let roll2 = Math.ceil(CONFIG.Dice.randomUniform() * 10);\n        let hitloc1 = this.actor.system.combat.hitLocations[this.actor.system.combat.hitLocAt(roll1)];\n        let hitloc2 = this.actor.system.combat.hitLocations[this.actor.system.combat.hitLocAt(roll2)];\n\n        this.item.updateSource({name : `${this.effect.name} (${game.i18n.localize(hitloc1.label)}, ${game.i18n.localize(hitloc2.label)})`});\n        this.script.scriptMessage(`\n        <a class=\"inline-roll\" data-tooltip=\"1d10\"><i class=\"fas fa-dice-d20\"></i> ${roll1}</a>: ${game.i18n.localize(hitloc1.label)}<br>\n        <a class=\"inline-roll\" data-tooltip=\"1d10\"><i class=\"fas fa-dice-d20\"></i> ${roll2}</a>: ${game.i18n.localize(hitloc2.label)}`, {whisper : ChatMessage.getWhisperRecipients(\"GM\").map(i => i.id)});",
            "2hna26O8j8h1KjQU": "        let item = this.actor.itemTypes.specialisation.find(i => i.name == \"Psyniscience\") || (await game.impmal.utility.findId(\"lBzdm76EnuuoGfMq\"));\n\n        let data = item.toObject();\n\n        data.system.advances++;\n\tthis.script.scriptNotification(\"Advanced Psyniscience\");\n        this.actor.update({items : [data]});",
            "2MtHsUbAu8dUkx8V": "args.fields.SL += 4;",
            "GNiTWVSIG5qqbI7K": "return !args.data.context.corruption && !args.data.context.resist?.includes(\"power\")",
            "sUaqu6yxravii0bM": "return args.data.context.corruption || args.data.context.resist?.includes(\"power\")",
            "CVj6pyuUVQ9v0HTV": "args.fields.SL -= 4;",
            "L9YVKUIxNV7RSGBM": "return args.data.context.corruption;",
            "Y4GTgDTr0Uu1Fk0P": "args.data.onlyAutomaticSuccess = true;",
            "8tfkrQye0rtkHmIi": "let skills = args.actor.itemTypes.specialisation.filter(s => [\"People\", \"High Gothic\", \"Evaluation\", \"Investigation\", \"Academics\", \"Common\", \"Human\", \"Inquiry\"].includes(s.name));\n\nlet chosen = (await DocumentChoice.create(skills, 1))[0]\n\nif (chosen)\n{\n    await chosen.update({\"system.advances\" : chosen.system.advances + 1});\n    await args.actor.update({\"system.xp.other.list\" : args.actor.system.xp.other.add({description : `${this.effect.name} (${chosen.name})`, xp: -20})})\n}",
            "SuZyO9QY5Ntdoq3e": "let weapons = this.actor.itemTypes.weapon.filter(i => i.system.isMelee && i.system.equipped.value && i.system.traits.has(\"twohanded\"))\nweapons.forEach(w => w.system.traits.add(\"rend\", {modify: true}));",
            "F2qzyLfand6XZquc": "this.actor.addCondition(\"prone\")",
            "sMZVdD4jIUXorCLb": "let weapons = this.actor.itemTypes.weapon.filter(i => i.system.isMelee && i.system.equipped.value && i.system.traits.has(\"twohanded\"))\nweapons.forEach(w => w.system.traits.add(\"spread\", {modify: true}));",
            "4ZvGbnizqODXWDH0": "let injury = (await game.impmal.utility.findId(\"eZdj2nZpxI009cad\")).toObject()\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "eb9AhgnfGJ95mE3w": " \tlet location = Math.ceil(CONFIG.Dice.randomUniform() * 2) == 1 ? \"leftArm\" : \"rightArm\"  // Get location chosen\n        let locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\n        let hand = location.split(\"Arm\")[0]; // Get hand side - \"left\" or \"right\"\n\n        let injury = (await game.impmal.utility.findId(\"FqNmgPQo3it7Wlgf\")).toObject()\n        this.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.hand\" : hand});\n        this.item.updateSource({name : `${this.item.name} (${locationName})`});\n\n        injury.name = injury.name.split(\"(\")[0] + `(${locationName})`\n        injury.system.location.value = location;\n\n        if (this.actor.type == \"character\")\n        {\n            await this.actor.update(this.actor.system.hands.toggle(hand));\n        }\n\n        await this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "78rncEzhOGrmlLBe": "return args.isAttack && args.actor.type == \"character\" && args.weapon && args.actor.system.hands[this.effect.flags.impmal.hand].id == args.weapon.id",
            "3TXuiCaW1thcrKrI": "let lostToes = this.item.getFlag(\"impmal\", \"lostToes\") || 1;\nthis.actor.system.characteristics.ws.modifier -= lostToes;\nthis.actor.system.characteristics.ag.modifier -= lostToes;\nthis.actor.overrides[\"system.characteristics.ws.modifier\"] = true;\nthis.actor.overrides[\"system.characteristics.ag.modifier\"] = true;",
            "JUnhFEfX2k0vGY1P": "\n            this.actor.setupSkillTest({key : \"discipline\"}, {title : {append : \" - \" + this.effect.name}}).then(test => \n            {\n                if (test.failed)\n                {\n                    this.actor.addCondition(\"stunned\");\n                }\n            });\n",
            "M3LMNRahDT8nsBik": "if (this.actor.uuid == ChatMessage.getSpeakerActor(this.effect.sourceTest?.context.speaker).uuid)\n\treturn;\n\nthis.actor.applyDamage(5).then(data => ui.notifications.notify(\"Took \" + data.woundsGained + \" Damage from Hazard\"));\n\nif (this.actor.hasCondition(\"blinded\"))\n{\n  return;\n}\n\nlet test = await this.actor.setupSkillTest({key : \"fortitude\", name : \"Endurance\"}, {fields : {difficulty : \"hard\"}, title : {append : ` – ${this.effect.label}`}})\n\nif (test.result.SL > this.effect.sourceTest?.result?.SL)\n{\n    this.actor.addCondition(\"blinded\");\n}",
            "z8nozhd8zjMjbqgg": "if (this.actor.uuid == ChatMessage.getSpeakerActor(this.effect.sourceTest?.context.speaker).uuid)\n\treturn;        \n\n\nthis.actor.applyDamage(5).then(data => ui.notifications.notify(\"Took \" + data.woundsGained + \" Damage from Hazard\"));\n\nif (this.actor.hasCondition(\"blinded\"))\n{\n  return \n}\n\n\n        this.actor.setupSkillTest({key : \"reflexes\", name : \"Dodge\"}, {fields : {difficulty : \"hard\"}, title : {append : ` – ${this.effect.label}`}}).then(test => {\n\nif (test.result.SL > this.effect.sourceTest?.result?.SL)\n{\n    this.actor.addCondition(\"blinded\");\n}\n        });",
            "yYDBuvA7orHzKFZs": "let location = this.item.system.location.value; // Get location chosen\nlet locationName = game.i18n.localize(this.actor.system.combat.hitLocations[location].label); // Get location label\nlet leg = location.split(\"Leg\")[0]; // Get leg side - \"left\" or \"right\"\n\nlet injury = (await game.impmal.utility.findId(\"thpflWusy6pFGmig\")).toObject()\nthis.effect.updateSource({name : `${this.effect.name} (${locationName})`, \"flags.impmal.leg\" : leg});\nthis.item.updateSource({name : `${this.item.name} (${locationName})`});\n\ninjury.name = injury.name.split(\"(\")[0] + `(${locationName.split(\" \")[0]} Foot)`\ninjury.system.location.value = location;\n\nawait this.actor.createEmbeddedDocuments(\"Item\", [injury]);",
            "byaRNiVXa7FITNlz": "let skill = args.actor.items.find(i => i.type == \"specialisation\" && i.name == \"Adeptus Terra\" && i.system.skill == \"lore\");\nif (skill)\n{\n    args.fields.SL += skill.system.advances;\n}\n",
            "IiqCL1ucUmZjYI9u": "return ![\"rapport\", \"presence\"].includes(args.data.skill)",
            "y50r0xwqsAeI19uL": "        args.fields.SL++;\n        if (args.fields.hitLocation != \"roll\" && this.item.system.taken >= 2)\n        {\n            args.advCount++;\n        }",
            "yllnE5hsW2mrKOwc": "return args.actor.system.combat.action != \"aim\" || !args.weapon?.system?.isRanged",
            "DLp1Lrm3D9T9328H": "return args.weapon?.system?.isRanged && args.actor.system.combat.action == \"aim\"",
            "GUbhc29q4W2imAXF": "        let psyker = await game.impmal.utility.findId(\"3GLGsYiH5LiKgYjE\");\n        let powers = (await game.impmal.utility.getAllItems(\"power\")).filter(i => i.system.discipline == \"minor\");\n        let power = powers[Math.floor(CONFIG.Dice.randomUniform() * powers.length)]?.toObject();\n        this.script.scriptNotification(`Gained ${power.name}`);\n        psyker = psyker.toObject();\n        psyker.effects = [];\n        this.actor.createEmbeddedDocuments(\"Item\", [psyker, power]);",
            "p4Likz0SxFhS7Pm4": "let helped = this.actor.effects.find(i => i.statuses.has(\"helped\"))\nif (helped)\n{\n\tthis.script.scriptMessage(\"Cannot be helped\");\n\tawait helped.delete();\n}",
            "a7JlCKC9k68ZJbUx": "return !args.isAttack || !args.weapon?.system.isMelee",
            "8FhCa2JB86daVsuo": "let location = this.effect.getFlag(\"impmal\", \"location\")?.split(\"Arm\")[0];\nif (this.actor.type == \"character\")\n{\n    return this.actor.system.hands[location].id == args.weapon?.id\n}",
            "0Hcw7O8IUhe26KGw": "args.data.additionalDamage++;",
            "oT7JoDfIPnJMT6Mb": "        if (args.combat.superiority > 0) \n        {\n            args.combat.speed.land.value = \"fast\";\n        }",
            "mfbnmPGUhtbKF4j4": "return ![\"athletics\", \"reflexes\"].includes(args.data.skill);",
            "6QL3jGsmx7XXgKaz": "return args.data.other.resist == \"prone\"",
            "mjcQXpfNgOKoFRV7": "args.data.context.automaticallySucceed = true;",
            "6OfSsEtNMEKzeVvt": "if (args.context.automaticallySucceed)\n{\n\targs.data.result.roll = 1;\n\targs.context.text[\"autoSucceed\"] = `<strong>${this.item.name}:</strong> Automatically succeeded.`\n}",
            "eVYnMP01ANtWGUTK": "        if (!args.options.wastedFrame && (args.data.system?.skills?.athletics?.advances || args.data.system?.skills?.fortitude?.advances))\n        {\n            delete args.data.system?.skills?.athletics?.advances;\n            delete args.data.system?.skills?.fortitude?.advances;\n            this.script.scriptNotification(\"Cannot advance this skill, use the Advance manual script to advance with the increased XP cost\");\n        }",
            "Mr4gUs6iKtCkzX8p": "let choice = await Dialog.wait({\n    title : \"Advance Skill\",\n    content : \"Choose which skill to advance. This will cost double XP.\",\n    buttons : {\n        athletics : {\n            label : game.i18n.localize(\"IMPMAL.Athletics\"),\n            callback : () => {\n                return \"athletics\";\n            }\n        },\n        fortitude : {\n            label : game.i18n.localize(\"IMPMAL.Fortitude\"),\n            callback : () => {\n                return \"fortitude\";\n            }\n        }\n    }\n});\n\nlet advances = this.actor.system.skills[choice].advances + 1\nif (advances > 4)\n{\n    return ui.notifications.error(\"Cannot advance beyond 4\");\n}\n\nlet cost = XPModel.skillTotalCosts[advances];\n\nif (this.actor.system.xp.available >= cost * 2)\n{\n    this.actor.update({[`system.skills.${choice}.advances`] : advances, \"system.xp.other.list\" : this.actor.system.xp.other.add({description : `Wasted Frame (${game.impmal.config.skills[choice]})`, xp : cost})}, {wastedFrame : true});\n    this.script.scriptNotification(\"Spent \" + (cost * 2) + \" XP\");\n}\nelse \n{\n    ui.notifications.error(\"Not enough XP\");\n}",
            "TXrDK69XPELaeIpf": "let heavyBolter = await fromUuid(\"Compendium.impmal-core.items.Item.rMIaVi1gx3wUghfU\");\nlet multimelta = heavyBolter.toObject();\nlet plasmaCannon = heavyBolter.toObject();\n\nmergeObject(multimelta, {name : \"Multi-melta\", system : {\n        category : \"melta\",\n        damage : {\n            base : \"16\",\n        },\n        traits : {\n            list : [{key : \"heavy\", value : '4'}, {key : \"rend\", value : '10'}, {key : \"twohanded\", value : undefined}]\n        }\n    },\n    id : randomID()\n})\n\nmergeObject(plasmaCannon, {name : \"Plasma Cannon\", system : {\n        category : \"plasma\",\n        damage : {\n            base : \"12\",\n        },\n        traits : {\n            list : [\n                {key : \"heavy\", value : '4'}, \n                {key : \"twohanded\", value : undefined}, \n                {key : \"unstable\", value : undefined}, \n                {key : \"supercharge\", value : \"4\"}, \n                {key : \"loud\", value : undefined}, \n                {key : \"penetrating\", value : \"6\"}\n            ]\n        }\n    },\n    id : randomID()\n})\n\nlet choice = await DocumentChoice.create([heavyBolter, plasmaCannon, multimelta], 1, \"Choose Weapon\");\n\nthis.actor.createEmbeddedDocuments(\"Item\", choice);",
            "4bFDhpa2QS4GUo8H": "this.actor.setupSkillTest({key : \"presence\"}, {title : {append: ` - ${this.effect.name}`}})",
            "icIasDUJqIo9ihgi": "this.actor.setupSkillTest({key : \"rapport\"}, {title : {append: ` - ${this.effect.name}`}})",
            "508Ft1nurCFDPF0j": "let leg = await Dialog.wait({\n        label : \"Choose Leg\",\n        content : \"Which Leg?\",\n        buttons : {\n            leftLeg : {\n                label : \"Left Leg\",\n                callback : () => \n                {\n                    return \"leftLeg\";\n                }\n            },\n            rightLeg : {\n                label : \"Right Leg\",\n                callback : () => \n                {\n                    return \"rightLeg\";\n                }\n            }\n        }\n    });\n    let mainEffect = this.item.effects.contents[0];\n    \n    mainEffect.updateSource({\"flags.impmal.location\":  leg, name : mainEffect.name + ` (${game.i18n.localize(this.actor.system.combat.hitLocations[leg].label)})`})\n    \n    this.item.updateSource({name : this.item.name + ` (${game.i18n.localize(this.actor.system.combat.hitLocations[leg].label)})`});",
            "wtih922u4RbGO6k2": "let arm = await Dialog.wait({\n            label : \"Choose Arm\",\n            content : \"Which Arm?\",\n            buttons : {\n                leftArm : {\n                    label : \"Left Arm\",\n                    callback : () => \n                    {\n                        return \"leftArm\";\n                    }\n                },\n                rightArm : {\n                    label : \"Right Arm\",\n                    callback : () => \n                    {\n                        return \"rightArm\";\n                    }\n                }\n            }\n        });\nlet mainEffect = this.item.effects.contents[0];\n\nmainEffect.updateSource({\"flags.impmal.location\":  arm, name : mainEffect.name + ` (${game.i18n.localize(this.actor.system.combat.hitLocations[arm].label)})`});\n\nthis.item.updateSource({name : this.item.name + ` (${game.i18n.localize(this.actor.system.combat.hitLocations[arm ].label)})`});"
        });
    });

}
